// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


/*=================================*/
/*             Userüßë‚Äçü¶± - ÌöåÏõê        */
/*=================================*/



enum Role {
  ADMIN
  MEMBER
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String   @unique  @db.VarChar(255)
  username      String  @db.VarChar(100)
  password String  @db.VarChar(255)
  
  role  Role

  lightningPosts LightningPost[] @relation("UserLightningPosts")
  lightningPostLike LightningPostLike[] 
  lightningPostComments LightningPostComment[] @relation("UserLightningPostComments")


  blahPosts BlahPost[] @relation("UserBlahPosts")
  blahPostLike BlahPostLike[] @relation("UserBlahPostLikes")
  blahPostComments BlahPostComment[] @relation("UserBlahPostComments")

  notices Notice[] @relation("AdminUserNotices")
}




/*=================================*/
/*      ‚ö°Ô∏èLightning - Î≤àÍ∞ú Í≤åÏãúÎ¨º    */
/*=================================*/

enum LightningCategory {
  CODING //"ÏΩîÎî©"
  ETC //"Í∏∞ÌÉÄ"
  TOUR // "Ìà¨Ïñ¥"
}

enum LightningStatus {
  RECRUITING // Î™®ÏßëÏ§ë
  CLOSED     // Î™®ÏßëÎßàÍ∞ê
  CANCELED   // Ï∑®ÏÜå
  FINISHED   // Ï¢ÖÎ£å
  ONGOING     // ÌòÑÏû¨ ÏßÑÌñâÏ§ë
}

model LightningPost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  content String
  scheduledAt DateTime // ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï ÏïΩÏÜç ÏãúÍ∞Ñ 

  status LightningStatus
  category LightningCategory  


  comments LightningPostComment[] @relation("LightningPostComments")
  likes LightningPostLike[]

  userId Int?
  user User? @relation("UserLightningPosts", fields: [userId], references: [id], onDelete: SetNull)

   @@index([title])
  @@index([category])
}

model LightningPostLike  {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  lightningPostId Int
  lightningPost LightningPost @relation( fields: [lightningPostId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lightningPostId])
}


model LightningPostComment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  lightningPostId Int
  lightningPost LightningPost @relation("LightningPostComments", fields: [lightningPostId], references: [id] , onDelete: Cascade)

  userId Int? 
  user User? @relation("UserLightningPostComments", fields: [userId], references: [id], onDelete: SetNull) 
}





/*=================================*/
/*      üó£Ô∏èBlahPost  - ÏûêÏú† Í≤åÏãúÎ¨º     */
/*=================================*/

enum BlahPostCategory {
  RECOMMEND //"Ï∂îÏ≤ú"
  ETC //"Ïû°Îã¥"
}



model BlahPost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  content String

  category BlahPostCategory  

  comments BlahPostComment[] @relation("BlahPostComments")
  likes BlahPostLike[] @relation("BlahPostLikes")

  userId Int?
  user User? @relation("UserBlahPosts", fields: [userId], references: [id], onDelete: SetNull)
}

model BlahPostComment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  content String //Î≥∏Î¨∏

  userId    Int?
  user      User?     @relation("UserBlahPostComments", fields: [userId], references: [id], onDelete: SetNull)

  blahPostId Int
  blahPost BlahPost @relation("BlahPostComments" ,fields: [blahPostId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([blahPostId])
}


model BlahPostLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blahPostId Int
  blahPost BlahPost @relation("BlahPostLikes", fields: [blahPostId], references: [id], onDelete: Cascade)

  userId Int 
  user User @relation("UserBlahPostLikes", fields: [userId], references: [id], onDelete: Cascade) 

  @@index([userId])
  @@index([blahPostId])
}






/*=================================*/
/*       üì£ -  Í≥µÏßÄÏÇ¨Ìï≠             */
/*=================================*/


enum NoticeCategory {
EVENT //Ïù¥Î≤§Ìä∏
GUIDE // ÏïàÎÇ¥
WARNING // Ï£ºÏùò
}

model Notice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  content String
  category NoticeCategory  

  userId Int?
  user User? @relation("AdminUserNotices", fields: [userId], references: [id], onDelete: SetNull)
}